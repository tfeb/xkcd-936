#!/usr/bin/env python2.7
# File             - random-password
# Description      - make a random password, using real OS randomness.
# Author           - Tim Bradshaw (tfb at tfeb.org)
# Created On       - Wed Apr 29 14:21:05 2015
# Status           - Unknown
#
# $Format:(@:%H)$
#

"""Random passwords using OS randonmess

Simple use is

    random-password

or

    random-password n

where n is the length required, the default being 10 characters.

By default passwords will have characters from ASCII uppercase,
lowercase, digits & punctition with equal likelyhoods.  This makes for
the hardest-to-crack passords (for the given alphabet) but may
occasionally not meet password requirements: in that case you'll need
to use a configuration file.

You can also give a configuration file (in JSON) via `-c` which lets
you override character classes, likelihoods and requirements and
default length.  This needs to be documented but isn't currently.
`-d` will dump the effective configuration as JSON and is useful to
understand what is needed in a configuration file.

If you want to be even more clever, the `-s` argument causes it to
read a (mandatory) condfiguration file (specified with `-c` as above)
which contains a sequence of specifications, and the resulting
password will be the ordered concatenation of a sequence of passwords
meeting each specification.  The specifications must include the
lengths of the concatenated chunks, and you can't override these on
the command line (because I was too lazy to implememt it).

The program detects if you give it requirements it can't meet (for the
defaults this is a password with length less than 4).  Even if it can
meet the requirements it could in theory fail to terminate: it does
not (and can not) detect that.

This uses Python's `random.SystemRandom` class, and in particular its
`randint(min, max)` method: it is not clear how good this is.  If you
set things up so that passwords can contain only two different
characters and generate long ones they seem to be strongly biased to
one value in some cases.  This may be a bug in this code of course.

See also `random-passphrase` which is more useful in many cases
assuming the requirements placed on passwords are not too silly.

f-!Di|3Hw/

"""

import sys
import os
import random
import string
import optparse                 # 2.6
import json

# The whole Unicode thing is a hopeless mess in Python 2: one thing
# that seems to be true is that Unicode strings have the same hashes
# as plain strings, but this is clearly enormously encodding-dependent
# and I'm not going to rely on it.

default_classes = {
    u"characters": unicode(string.ascii_uppercase
                      + string.ascii_lowercase
                      + string.digits
                      + string.punctuation)
}

default_likelihoods = {
    u"characters": 1
}

default_requirements = dict([(n, 1) for n in default_classes.keys()])

default_length = 10

verbose = False

def main():
    """The program"""
    parser = optparse.OptionParser(usage="%prog [options] [length]")
    parser.add_option("-c", "--config-file",
                      dest="config",
                      help="read JSON config file CONFIG")
    parser.add_option("-d", "--dump-config",
                      action="store_true", dest="dump",
                      help="dump effective JSON config (no password generated)")
    parser.add_option("-s", "--sequence",
                      action="store_true", dest="sequence",
                      help="use a listy config to make a concatenated password")
    parser.add_option("-v", "--verbose",
                      action="store_true", dest="verbose",
                      help="be verbose, (doesn't do anything currently)")
    parser.add_option("-m", "--man",
                      action="store_true", dest="pydoc",
                      help="use pydoc to display the documentation")

    (options, positionals) = parser.parse_args()
    if options.pydoc:
        pydoc = "pydoc{0}.{1}".format(sys.version_info[0], sys.version_info[1])
        os.execlp(pydoc, pydoc, sys.argv[0])
    global verbose
    verbose = options.verbose

    (options, positionals) = parser.parse_args()
    try:
        if not options.sequence:
            # the standard case
            length = (int(positionals[0])
                      if len(positionals) >= 1
                      else None)
            if len(positionals) > 1:
                warn("extra arguments dropped")
            if length != None and length < 0:
                raise Exception("negative creep")
            config = settings(options.config, length)
            if not options.dump:
                print random_password(**config)
            else:
                dump_settings(config)
        else:
            # the hairy case: there must be a config and it must
            # specify a sequence of configs, including their lengths.
            if not options.config:
                raise Exception("no config given for concatenated password")
            if len(positionals) > 0:
                warn("ignoring arguments")
            config = json_settings(options.config, sequence=True)
            if not options.dump:
                print(u"".join([random_password(**c) for c in config]))
            else:
                dump_settings(config)
    except Exception as e:
        sys.exit("{0}: {1}".format(os.path.basename(sys.argv[0]), e))

def random_password(length=default_length,
                    classes=default_classes,
                    likelihoods=default_likelihoods,
                    requirements=default_requirements):
    """generate a random password"""
    if sum(requirements.values()) > length:
        raise Exception("can't meet requirements")

    gen = random.SystemRandom()
    buckets = [c for (c, l) in likelihoods.iteritems()]

    good = False
    while not good:
        p = range(length)
        counts = {}
        for i in p:
            b = buckets[gen.randint(0, len(buckets) - 1)]
            c = classes[b][gen.randint(0, len(classes[b]) - 1)]
            p[i] = c
            counts[b] = counts[b] + 1 if b in counts else 1

        good = True
        for (r, v) in requirements.iteritems():
            # only check requirements when they are > 0!
            if v > 0 and (r not in counts or counts[r] < v):
                good = False

    return u"".join(p)

def settings(source, length):
    """return a dict of settings which random_password can eat"""
    # This is called to get the settings in the normal case. This is
    # the last place that knows about the global length default
    if source:
        return json_settings(source, length=length,
                             fallback_length=default_length)
    else:
        return {"length": length if length else default_length,
                "classes": default_classes,
                "likelihoods": default_likelihoods,
                "requirements": default_requirements}

def json_settings(source, length=None, fallback_length=None, sequence=False):
    """read settings from a JSON file, check and return them"""
    # This function deals with reading either a configuration or a
    # list of them: most of the work is done by
    # canonicalise_json_settings below.
    #
    # length is the length from the command line, fallback_length is a
    # fallback. Both can be None, and will be in the sequence case.
    #
    # This is called from toplevel in the sequence case

    def puke(control, *args):
        raise Exception("{0} - ".format(source) + control.format(*args))

    with open(source, 'r') as jp:
        raw = json.load(jp)

    if (not sequence):
        return canonicalise_json_settings(raw, length, fallback_length, source)
    else:
        if not isinstance(raw, list):
            puke("expecting a list of configurations")
        return [canonicalise_json_settings(r, None, None, source)
                for r in raw]

def canonicalise_json_settings(raw, length, fallback_length, source):
    """check settings read from a file, and get them into a good form"""
    # This function is where what's *in* a JSON config file is
    # defined, and it's just fiddly and painful as it's doing a lot of
    # checking.  It *should* be the case that if this returns it
    # returns good data, but random_password checks a little more.
    #
    # This function checks one bunch of settings: this is either what
    # was read from the file, or element of the list of configurations
    # in the file.  What should be there is:
    # - all the classes
    # - optionally likelihoods for the classes, where missing entries
    #   will be assumed to be 1
    # - optionally requirements, defaulted to 0.
    # - and optionally length, if we didn't get anything from the
    #   command line

    def puke(control, *args):
        raise Exception("{0} - ".format(source) + control.format(*args))

    if not isinstance(raw, dict):
        puke("catastrophic JSON failure")

    # Get a length.  Take length if given, else what was in the JSON,
    # else the fallback if given, else die.
    if length is None:
        if u"length" in raw:
            length = raw[u"length"]
        elif fallback_length is not None:
            length = fallback_length
        else:
            puke("failed to get a length")
    if not isinstance(length, int):
        puke("bogus length {0} in config", length)
    if length < 0:
        puke("negative creep")

    classes = (raw[u"classes"]
                   if u"classes" in raw
                   else None)
    likelihoods = (raw[u"likelihoods"]
                   if u"likelihoods" in raw
                   else {})
    if classes == None:
        puke("no classes at all")
    elif len(classes) == 0:
        puke("empty class map")

    # check classes: it needs to be a dict mapping strings to strings,
    # with both sides being unicode
    if not isinstance(classes, dict):
        puke("classes isn't a dict?")
    for (k, v) in classes.iteritems():
        # I'm pretty sure that k does not need to be checked since
        # JSON mandates it, but it can't hurt
        if not (isinstance(k, unicode) and isinstance(v, unicode)):
            puke("bogus type for class {0}, value {1}", k, v)

    # check and fix up likelihoods
    if not isinstance(likelihoods, dict):
        puke("likelihoods isn't a dict?")
    for (k, v) in likelihoods.iteritems():
        if not (isinstance(k, unicode) and isinstance(v, int)):
            puke("bogus type for likelihood {0}, value {1}", k, v)
        if v < 0:
            puke("negative likelihood for {0}, value {1}", k, v)
    # remaining likelihoods are defaulted below

    if u"requirements" in raw:
        # given requirements: sanity check and default missing to 0
        requirements = raw[u"requirements"]
        if not isinstance(requirements, dict):
            puke("requirements isn't a dict")
        for (k, v) in requirements.iteritems():
            if not (isinstance(k, unicode) and isinstance(v, int)):
                puke("bogus type for requirement {0}, value {1}", k, v)
            # It is OK for a requirement to be negative, but we need
            # the likelihood to be > 0 if the requirement is > 0
            if v > 0 and k in likelihoods and likelihoods[k] == 0:
                puke("likelihood for {0} is 0 but requirement is {1}", k, v)
        # remaining requirements defaulted below

    else:
        # not given requirements at all: default to 1 for each class,
        # unless the likelihood was given as 0
        requirements = dict([(k, 1 if k in likelihoods and likelihoods[k]
                                   else 0)
                             for k in classes.keys()])

    # default likelihoods to 1 and requirements to 0
    for k in classes.keys():
        if k not in likelihoods:
            likelihoods[k] = 1
        if k not in requirements:
            requirements[k] = 0

    # Don't let the user specify zero likelihoods for everything
    if sum(likelihoods.values()) == 0:
        puke("all likelihoods are zero")

    # OK, we are done
    return {"length": length,
            "classes": classes,
            "likelihoods": likelihoods,
            "requirements": requirements}

def dump_settings(settings, stream=sys.stdout):
    json.dump(settings, stream, indent=1)
    print >>stream, ""

def warn(fmt, *args):
    """just warn"""
    print >>sys.stderr, fmt.format(*args)

def note(fmt, *args):
    """note something, if verbose"""
    if verbose:
        print >>sys.stderr, fmt.format(*args)

# Run
if __name__ == '__main__':
    main()
